---class-method---
new(array)
new(size) { |index| block }
try_convert(obj)
---instance-method--
assoc(obj)
at(index)
bsearch { |x| block }
---EOF---
clear
collect { |item| block }
collect
collect! { |item| block }
collect!
combination(n) { |c| block }
combination(n)
compact
compact!
concat
count
count(obj)
count { |item| block }
cycle(n) { |obj| block }
cycle(n)
delete(obj)
delete(obj) { block }
delete_at(index)
drop
drop_while { |ary| block }
drop_while
each { |item| block }
each
each_index { |index| block }
each_index
empty?
eql?
fetch(index)
fetch(index, default)
fetch(index) { |index| block }
fill(obj)
fill(obj, start)
fill(obj, start, length)
fill(obj, range)
fill { |index| block }
fill(start) { |index| block }
fill(start, length) { |index| block }
fill(start) { |index| block }
find_index(obj)
find_index { |item| block }
find_index
first
first(n)
flatten
flatten(level)
flatten!
flatten!(level)
frozen?
hash
include?(obj)
index(obj)
index { |item| block }
index
insert(index, obj)
inspect
to_s
join(separator)
keep_if { |item| block }
keep_if
last
last(n)
length
map { |item| block }
map
map! { |item| block }
map!
pack(aTemplateString)
permutation { |p| block }
permutation
permutation(n) { |p| block }
permutation(n)
pop
pop(n)
product(other_ary)
product(other_ary) { |p| block }
push
rassoc(obj)
reject { |item| block }
reject
reject! { |item| block }
reject!
repeated_combination(n) { |c| block }
repeated_combination(n)
repeated_permutation(n) { |p| block }
repeated_permutation(n)
replace(other_ary)
reverse
reverse!
reverse_each { |item| block }
reverse_each
rindex(obj)
rindex { |item| block }
rindex
rotate(count)
rotate!(count)
sample
sample(random: rng)
sample(n)
sample(n, random: rng)
select { |item| block }
select
select! { |item| block }
select!
shift
shift(n)
shuffle
shuffle(random: rng)
shuffle!
shuffle!(random: rng)
size
slice(index)
slice(start, length)
slice(range)
slice!(index)
slice!(start, length)
slice!(range)
sort
sort { |a, b| block } 
sort!
sort! { |a, b| block } 
sort_by! { |obj| block }
sort_by! 
take(n)
take_while { |arr| block }
take_while
to_a
to_ary
to_h
to_s
transpose
uniq
uniq { |item| block }
uniq!
uniq! { |item| block }
unshift(obj)
values_at(selector)
unshift(obj)
values_at(selector)
zip(arg)
zip(arg) { |ary| block }